VMRC API SPECIFICATION
======================

Background
----------

This file provides a detailed description of the methods, parameters and
properties of the VMRC API implemented by vCloud Director 1.5.


Constants
---------

+MimeType+
~~~~~~~~~~
    * Value: +application/x-vmware-remote-console-2011-1+
    * Used to load the plugin in Firefox.

+CLSID+
~~~~~~~
   * Value: +CLSID:A24C4C22-E2B7-4701-9DF1-E51BDC809850+
   * Used to load the plugin in Internet Explorer. 


Property Value Constants
------------------------

The following property values are exposed by the VMRC API and should be
retrieved and used as appropriate when invoking API methods or interpreting
event callback parameters.

.Note
**********************************************************************
In Internet Explorer, these values are exposed as dictionaries corresponding
to each property value class name; whereas in Firefox each value directly
corresponds to a property name.

.Example: values of +VMRC_CS_CONNECTED+
[options="header",cols="1,5",frame="topbot"]
|=====================================================================
|Browser          | Syntax

|Internet Explorer| +pluginObj.VMRC_ConnectionState("VMRC_CS_CONNECTED")+
|Firefox          | +pluginObj.VMRC_ConnectionState.VMRC_CS_CONNECTED+
|=====================================================================
**********************************************************************

+VMRC_Mode+
~~~~~~~~~~~
  * Values:
     - +VMRC_MKS+
     - +VMRC_DEVICES+
  * Specified at +startup()+ time to indicate the mode of the VMRC plugin
    instance for the lifetime of its connection.
  * A plugin may operate in either +MKS+ mode where guest screen contents are
    displayed and the user can interact with the guest, or +DEVICES+ mode in
    order to connect/disconnect remote device backings to/from virtual machine
    devices.
  * Currently +VMRC_MKS+ is the only supported value.

+VMRC_MessageMode+
~~~~~~~~~~~~~~~~~~
  * Values:
     - +VMRC_EVENT_MESSAGES+
  * Specified at +startup()+ time to indicate the mode by which messages are
    delivered from the plugin to its container. 
  * Currently +VMRC_EVENT_MESSAGES+ is the only supported value.


+VMRC_MessageType+
~~~~~~~~~~~~~~~~~~
  * Values:
      - +VMRC_MESSAGE_INFO+
      - +VMRC_MESSAGE_WARNING+
      - +VMRC_MESSAGE_ERROR+
      - +VMRC_MESSAGE_HINT+
  * Indicates the type of message delivered to the +onMessage()+ event handler.

+VMRC_ConnectionState+
~~~~~~~~~~~~~~~~~~~~~~
  * Values:
     - +VMRC_CS_DISCONNECTED+
     - +VMRC_CS_CONNECTED+
  * Specifies the connection state to the +onConnectionState()+ event handler.


+VMRC_GrabState+
~~~~~~~~~~~~~~~~
  * Values:
     - +VMRC_GS_GRABBED+
     - +VMRC_GS_UNGRABBED_HARD+
     - +VMRC_GS_UNGRABBED_SOFT+
  * Specifies the active grab type to the +onGrabState()+ event handler.
  * In a soft-ungrab state, input will be redirected to the guest once the user
    mouses over the guest window.


Events
------

The following events are generated by the VMRC API. 

.Note
**********************************************************************
In Internet Explorer, handler functions can be bound to events generated by the
plugin using the attachEvent method exposed by the plugin. In Firefox, each
event corresponds to a plugin instance property and handlers may be bound by
setting the value of the property. 
**********************************************************************

+onConnectionStateChange(cs, host, vmId, userRequested, reason)+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Invoked in response to connection state changes.
   * Handler parameters:
     +cs [string]+::
        connection state, one of +VMRC_CS_DISCONNECTED+ or +VMRC_CS_CONNECTED+
     +host [string]+::
        remote hostname of connection
     +vmId [string]+::
        VM id/reference for connection
     +userRequested [boolean]+::
        was this connection state requested by the user?
     +reason [string]+::
        further information on what took place

+onScreenSizeChange(width, height)+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Invoked in response to changes in the guest screen size.
   * Handler parameters:
     +width [int]+::
        new width of guest screen
     +height [int]+::
        new height of guest screen

+onFullscreenChange(fs)+
~~~~~~~~~~~~~~~~~~~~~~~~
   * Invoked in response to changes in the plugin fullscreen state.
   * Handler parameters:
     +fs [boolean]+::
        new fullscreen state (true -> plugin has switched to fullscreen)

+onGrabStateChangeHandler(gs)+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Invoked in response to changes in the plugin grab state.
   * Handler parameters:
     +gs [VMRC_GS_GRABBED, VMRC_GS_UNGRABBED_HARD, VMRC_GS_UNGRABBED_SOFT]+::
        new grab state

+onMessageHandler(type, message)+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Invoked in response to a new message generated by the plugin.
   * Handler parameters:
     +type [VMRC_MESSAGE_INFO, VMRC_MESSAGE_WARNING, VMRC_MESSAGE_ERROR, VMRC_MESSAGE_HINT]+::
        type of message
     +message [string]+::
        message content


Methods
-------

The following methods are provided by the VMRC API. 

+isReadyToStart()+
~~~~~~~~~~~~~~~~~~
   * Indicates whether the plugin has loaded and is ready to be started.
   * Returns: +[boolean]+
      +true+::
         if +startup()+ can be called
      +false+::
         if not

+startup(mode, msgmode, persistent, advancedconfig)+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Must be invoked prior to +connect()+ in order to initialize the plugin.
   * Parameters:
      +mode [VMRC_Mode]+::
         only supported value is +VMRC_MKS+
      +msgmode [VMRC_MessageMode]+::
         only supported value is +VMRC_EVENT_MESSAGES+
      +persistent [boolean]+::
         only supported value is +false+
      +advancedconfig [string]+::
         only supported value is +usebrowserproxy=true;tunnelmks=true+
   * Returns: +[boolean]+
      +true+::
         on success
      +false+::
         on failure

+shutdown()+
~~~~~~~~~~~~
   * Shuts down the plugin instance. 
   * Returns: +[boolean]+
      +true+::
         on success
      +false+::
         on failure

+connect(host, ticket, internal1, internal2, vmid, internal3, internal4)+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Connect the plugin instance to a remote host.
   * Parameters:
      +host [string]+::
         hostname/IP of remote host provided by VMware vCloud Director API
      +ticket [string]+::
         screen ticket provided by VMware vCloud Director API
      +vmid [string]+::
         vm ID provided by VMware vCloud Director API 
      +internal1+, +internal2+, +internal3+, +internal4 [string]+::
         internal use, must be the empty string ("")
   * Returns: +[boolean]+
      +true+::
         on success
      +false+::
         on failure

+disconnect()+
~~~~~~~~~~~~~~
   * Disconnect the plugin instance from a remote host.
   * Returns: +[boolean]+
      +true+::
         on success
      +false+::
         on failure

+getConnectionState()+
~~~~~~~~~~~~~~~~~~~~~~
   * Retrieve current connection state.
   * Returns: +[VMRC_ConnectionState]+
      +VMRC_CS_CONNECTED+::
         if the plugin is connected
      +VMRC_CS_DISCONNECTED+::
         if the plugin is not connected

+screenWidth()+
~~~~~~~~~~~~~~~
   * Retrieve current screen width.
   * Returns: +[int]+

+screenHeight()+
~~~~~~~~~~~~~~~~
   * Retrieve current screen height.
   * Returns: +[int]+

+setFullscreen(fs)+
~~~~~~~~~~~~~~~~~~~

   * Instruct the plugin to enter/exit fullscreen mode.
   * Parameters:
      +fs [boolean]+::
         +true+ to enter fullscreen mode, +false+ to exit
   * Returns: +[boolean]+
      +true+::
         on success
      +false+::
         on failure

+sendCAD()+
~~~~~~~~~~~
   * Instruct the plugin to deliver a Control-Alt-Delete key sequence to the guest.
   * Returns: +[boolean]+
      +true+::
         on success
      +false+::
         on failure

+getVersion()+
~~~~~~~~~~~~~~
   * Retrieve a string representing the current complete version number of the
     installed VMRC Plugin.
   * Returns: +[string]+ VMRC plugin full version number

+getSupportedApi()+
~~~~~~~~~~~~~~~~~~~
   * Retrieve an array of supported APIs. See example:getSupportedApi().
   * Returns: +[string[]]+ array indicating supported API strings, e.g. +"vsphere-2011"+
